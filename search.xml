<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>开发说明|规范</title>
      <link href="/platform.github.io/2022/07/15/standard/"/>
      <url>/platform.github.io/2022/07/15/standard/</url>
      
        <content type="html"><![CDATA[<h2 id="开发说明"><a href="#开发说明" class="headerlink" title="开发说明"></a>开发说明</h2><h3 id="EnableCustomConfig"><a href="#EnableCustomConfig" class="headerlink" title="@EnableCustomConfig"></a>@EnableCustomConfig</h3><p>服务启动类可以通过<code>@EnableCustomConfig </code>进行服务的初始化配置。该注解主要有以下几个作用：</p><ol><li>MappScan扫描支持</li><li>ComponentScan扫描支持</li></ol><h3 id="EnableCustomSwagger2"><a href="#EnableCustomSwagger2" class="headerlink" title="@EnableCustomSwagger2"></a>@EnableCustomSwagger2</h3><p><code>@EnableCustomSwagger2</code> 对在线api文档支持，&#x2F;doc.html访问swagger加强</p><h3 id="LoginUser"><a href="#LoginUser" class="headerlink" title="@LoginUser"></a>@LoginUser</h3><p>在controller参数中通过<code>@LoginUser SysUser loginUser</code> 获取当前登录用户<br><strong>示例</strong><br> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/functions/manage"</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"application/json; charset=utf-8"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span> <span class="token function">queryManageFunctions</span><span class="token punctuation">(</span><span class="token annotation punctuation">@LoginUser</span> <span class="token class-name">SysUser</span> loginUser<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ... </span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="Log-title-x3D-“设计”-businessType-x3D-BusinessType-INSERT"><a href="#Log-title-x3D-“设计”-businessType-x3D-BusinessType-INSERT" class="headerlink" title="@Log(title &#x3D; “设计”, businessType &#x3D; BusinessType.INSERT)"></a>@Log(title &#x3D; “设计”, businessType &#x3D; BusinessType.INSERT)</h3><p>在controller方法上通过注解<code>@Log </code>实现操作日志收集(主要针对曾、删、改操作)<br><strong>示例</strong><br> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"保存"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Log</span><span class="token punctuation">(</span>title <span class="token operator">=</span> <span class="token string">"XXX保存"</span><span class="token punctuation">,</span> businessType <span class="token operator">=</span> <span class="token class-name">BusinessType</span><span class="token punctuation">.</span>INSERT<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ResObject</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Validated</span><span class="token punctuation">(</span><span class="token class-name">ValidType<span class="token punctuation">.</span>Default</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">BpmDefinitionDesignVO</span> vo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="Valid"><a href="#Valid" class="headerlink" title="@Valid"></a>@Valid</h3><p><code>@Valid</code>会对被标注的controller入参类进行参数校验</p><p>被标注的类中有<code>@Length</code>注解标注的字段，则该字段不能超过指定长度</p><p>被标注的类有<code>@NotBlank</code>注解标注的字段，则该字段不能为空</p><p>更多参数校验注解请参考hibernate validator</p><p>当校验条件不满足的时候，会进入统一异常处理，统一异常处理会给前端返回code为0，message为指定message的消息</p><p><strong>示例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> <span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">DeptBasic</span> dept<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptBasic</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"部门名称不可为空"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> jgMc<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Length</span><span class="token punctuation">(</span>max <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"选用标志长度最大为1"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> xybs<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="开发规范"><a href="#开发规范" class="headerlink" title="开发规范"></a>开发规范</h2><h3 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h3><h4 id="1-写好代码注释，统一格式"><a href="#1-写好代码注释，统一格式" class="headerlink" title="1.写好代码注释，统一格式"></a>1.写好代码注释，统一格式</h4><p>类注释：<br>&#x2F;**</p><ul><li>@author 作者</li><li>@Description 描述</li><li>@Date 日期（年月日时分秒）<br>*&#x2F;</li></ul><p>方法注释：</p><p>&#x2F;**</p><ul><li>@param formId  参数1描述</li><li>@param instId  参数2描述</li><li>@param taskKey 参数3描述</li><li>@return  ResObject 返回描述<br>*&#x2F;</li></ul><h4 id="2-返回格式统一-“code”-””-”message”-””-”data”-””"><a href="#2-返回格式统一-“code”-””-”message”-””-”data”-””" class="headerlink" title="2.返回格式统一{“code”:””,”message”:””,”data”:””}"></a>2.返回格式统一{“code”:””,”message”:””,”data”:””}</h4><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>code</td><td>200表示操作成功</td></tr><tr><td>message</td><td>提示信息</td></tr><tr><td>data</td><td>返回数据</td></tr></tbody></table><h4 id="3-做好异常处理"><a href="#3-做好异常处理" class="headerlink" title="3.做好异常处理"></a>3.做好异常处理</h4><p>所有接口都必须有异常抛出，在controller里捕获所有异常并做处理<br><strong>示例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/getData"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"application/json; charset=utf-8"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>   <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"获取表单数据"</span><span class="token punctuation">,</span> httpMethod <span class="token operator">=</span> <span class="token string">"GET"</span><span class="token punctuation">,</span> notes <span class="token operator">=</span> <span class="token string">"获取表单数据"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token class-name">ResObject</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token class-name">String</span> formId<span class="token punctuation">,</span> <span class="token class-name">String</span> instId<span class="token punctuation">,</span> <span class="token class-name">String</span> taskKey<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">List</span> result <span class="token operator">=</span> formDataService<span class="token punctuation">.</span><span class="token function">getDatas</span><span class="token punctuation">(</span>formId<span class="token punctuation">,</span> instId<span class="token punctuation">,</span> taskKey<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResObject</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">"获取表单数据成功"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BusinessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//业务异常捕获</span>           log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResObject</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//程序异常捕获</span>           log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"获取表单数据失败"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResObject</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"获取表单数据失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-请求路劲规范"><a href="#4-请求路劲规范" class="headerlink" title="4.请求路劲规范"></a>4.请求路劲规范</h4><p>常规请求统一路径：<br>1.分页列表请求 GET &#x2F;modelName&#x2F;list<br>示例：</p><pre class="line-numbers language-none"><code class="language-none">@GetMapping(&quot;list&quot;)@ApiOperation(value &#x3D; &quot;流程定义列表&quot;)@Log(title &#x3D; &quot;流程设计&quot;, businessType &#x3D; BusinessType.INSERT)public ResObject list(@LoginUser SysUser sysUser, BpmDefinitionDesignVO vo) &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详情请求 GET &#x2F;modelName&#x2F;{modelId}</p><pre class="line-numbers language-none"><code class="language-none">@GetMapping(value &#x3D; &#123;&quot;&#x2F;&quot;, &quot;&#x2F;&#123;modelId&#125;&quot;&#125;)@ApiOperation(value &#x3D; &quot;获取用户信息&quot;)public ResObject getUser(@PathVariable(value &#x3D; &quot;modelId&quot;, required &#x3D; true) String modelId)) &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.保存请求 POST &#x2F;modelName&#x2F;<br>示例：</p><pre class="line-numbers language-none"><code class="language-none">@PostMapping(&quot;&quot;)@ApiOperation(value &#x3D; &quot;定义保存&quot;)@Log(title &#x3D; &quot;设计&quot;, businessType &#x3D; BusinessType.INSERT)public ResObject saveDefinition(@LoginUser SysUser sysUser, @Validated(ValidType.Default.class) @RequestBody DefinitionDesignVO vo) &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.更新请求 PUT &#x2F;modelName&#x2F;<br>示例：</p><pre class="line-numbers language-none"><code class="language-none">@PutMapping(&quot;&quot;)@ApiOperation(value &#x3D; &quot;定义更新&quot;)@Log(title &#x3D; &quot;设计&quot;, businessType &#x3D; BusinessType.UPDATE)public ResObject updateDefinition(@LoginUser SysUser sysUser, @Validated(ValidType.Default.class) @RequestBody DefinitionDesignVO vo) &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.删除请求 DELETE &#x2F;modelName&#x2F;</p><pre class="line-numbers language-none"><code class="language-none">@DeleteMapping(&quot;&quot;)@ApiOperation(value &#x3D; &quot;定义删除&quot;)@Log(title &#x3D; &quot;设计&quot;, businessType &#x3D; BusinessType.DELETE)public ResObject deleteDefinition(@LoginUser SysUser sysUser,DefinitionDesignVO vo) &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-feign"><a href="#5-feign" class="headerlink" title="5.feign"></a>5.feign</h4><p>以feign形式提供接口服务，接口地址统一“&#x2F;api”开头</p><h4 id="6-mybatis-plus"><a href="#6-mybatis-plus" class="headerlink" title="6.mybatis-plus"></a>6.mybatis-plus</h4><p>mapper、dao 继承类BaseMapper<T>，并在T实体类上添加@TableName、@TableId注解<br><strong>示例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span><span class="token string">"sys_unit"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SysUnit</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...实体类</span>    <span class="token comment">/**     * 机构主键     */</span>    <span class="token annotation punctuation">@TableId</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> unitId<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SysUnitMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SysUnit</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span> <span class="token comment">// ...mapper || dao接口类 肠过操作可以省略代码块及自动映射</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-版本管理提交格式"><a href="#7-版本管理提交格式" class="headerlink" title="7.版本管理提交格式"></a>7.版本管理提交格式</h4><p>1.git版本管理提交：<br>add：新增XXX功能<br>fix：修复XXXbug  ||  完善XXX功能</p><p>2.svn版本管理提交：<br>【提交人】XXX<br>【处理模块】工作流表单服务<br>【解决问题】新增添加表单保存接口</p><h4 id="8-代码生成"><a href="#8-代码生成" class="headerlink" title="8.代码生成"></a>8.代码生成</h4><p>地址：<br><a href="http://192.168.6.116:8080/">http://192.168.6.116:8080</a><br>需要先设计数据库表，根据表结构生成controller\service\dao\entity\mapper.xml等相关代码文件</p><h4 id="9-license存放位置"><a href="#9-license存放位置" class="headerlink" title="9.license存放位置"></a>9.license存放位置</h4><p>win：将license文件存放到应用所在的磁盘根路径&#x2F;opt&#x2F;license&#x2F;文件夹下<br>linux：将license文件存放到&#x2F;opt&#x2F;license&#x2F;文件夹下</p>]]></content>
      
      
      <categories>
          
          <category> 开发规范 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发规范 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工作流</title>
      <link href="/platform.github.io/2022/07/11/engine/"/>
      <url>/platform.github.io/2022/07/11/engine/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>工作流基于activity开源框架做二次封装功能，支持中国特色工作流：有撤回、驳回、驳回发起人、驳回上一步、任意节点驳回、驳回后直达驳回节点、任意节点跳转、会签后根据会签结果走不同出口、会签加签、减签等等。</p>]]></content>
      
      
      <categories>
          
          <category> 工作流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作流 </tag>
            
            <tag> activity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>玄剑中台</title>
      <link href="/platform.github.io/2022/07/08/index/"/>
      <url>/platform.github.io/2022/07/08/index/</url>
      
        <content type="html"><![CDATA[<h2 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h2><p><img src="/platform.github.io/medias/pic/jgt.JPG" alt="架构图"></p>]]></content>
      
      
      <categories>
          
          <category> 架构图 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 中台 </tag>
            
            <tag> 架构图 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
